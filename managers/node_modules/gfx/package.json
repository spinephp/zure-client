{
  "name": "gfx",
  "description": "3D CSS3 animation library for jQuery",
  "version": "0.0.4",
  "author": {
    "name": "maccman"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/maccman/gfx/blob/master/LICENSE"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/maccman/gfx.git"
  },
  "engine": [
    "*"
  ],
  "main": "./index.js",
  "dependencies": {
    "jqueryify": "~0.0.1"
  },
  "readme": "#GFX \n\nGFX is an 3D CSS3 animation library that extends jQuery with some useful functionality for programmatically creating CSS3 transitions. CSS3 transitions are superior to manual ones (using setTimeout) since they're hardware accelerated, something particularly noticeable on mobile devices.\n\nGFX currently only supports WebKit browsers (Safari/Chrome). Firefox support is planned. For best results, use [WebKit Nightly](http://nightly.webkit.org/)\n\nTo see some demos, checkout [GFX's site](http://maccman.github.com/gfx/).\n\n![GFX](https://lh4.googleusercontent.com/-LLsYFy2fsDU/TfWLdsroWuI/AAAAAAAABPY/xZSnjX2EEQQ/s640/Screen%252520shot%2525202011-06-12%252520at%25252020.58.58.png)\n\n#Basic usage\n\nUsage is very straightforward, simply include the `gfx.js` file in the page, along with [jQuery](http://jquery.com).\n\n    <script src=\"site/jquery.js\" type=\"text/javascript\" charset=\"utf-8\"></script>  \n    <script src=\"lib/gfx.js\" type=\"text/javascript\" charset=\"utf-8\"></script>  \n    \nThen call, `$.fn.gfx()`, passing in a set of properties and optional options.\n    \n    $(\"#element\").gfx(properties, options)\n    \nProperties can be any CSS styles that you want to transition, such as `color`, `background` or `width`. In addition, any properties that you'd normally use with `-webkit-transform`, can be used without the `transform` prefix, such as with `scale` and `rotate` in the example below.\n    \n    $(this).gfx({\n      scale: \"1.5\",\n      rotate: \"180deg\"\n    })\n    \nValid options for `gfx()` are:\n\n* `duration` - animation duration in milliseconds\n* `easing` - animation flow control, either `linear`, `ease-in`, `ease-out`, `ease-in-out`, or a custom cubic bezier\n* `complete` - a callback function executed after the animation has finished\n* `queue` - specifies which animation queue to use, by default `fx`. Set to false to disable queuing\n    \nAs with normal jQuery animations, GFX transitions can be chained so they run one after an other. Additionally, you can still use the `delay()` function.\n    \n    .gfx({\n      rotate: \"0deg\",\n      translateX: \"-100px\"\n    }).delay(100).gfx({\n      scale: \"1\"\n    }).gfx({\n      rotate: \"0deg\",\n      translateX: \"-100px\"\n    })\n\n##In-built effects\n\nGFX comes with several in built effects, but you can easily add your own. They do what they say on the tin. To seem them live checkout the [GFX website](http://maccman.github.com/gfx/).\n        \n    $.fn.gfxExplodeOut()\n    $.fn.gfxExplodeIn()\n    $.fn.gfxBlip()\n    $.fn.gfxFadeIn()\n    $.fn.gfxFadeOut()\n    \n#Overlay\n\nGFX comes with a overlay (lightbox) effect. First include the script `gfx.overlay.js` (after `gfx.js`).\n    \n    <script src=\"lib/gfx.overlay.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\n\nThen call `$.gfxOverlay()`, passing in a element and optional settings. The element will be cloned and presented to the user above the overlay. If you specify a `<script />` element, then GFX will use the script's inner HTML. You should also specify a height and width for the dialog box. \n    \n    $(\".about\").click(function() {\n      return $.gfxOverlay(\"#aboutText\", {width: 300, height: 130});\n    });\n    \n#Flip\n\nThe flip effect is for showing two elements that be can flipped between. To use it, first include the `gfx.flip.js` script.\n\n    <script src=\"lib/gfx.flip.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\n    \nThen you need to create an element with the correct markup, including two children with `.front` and `.back` classes. You may want to set the `.back` element's `display` to `none` in your CSS file to avoid a flash before the JS kicks in.\n\n    <div id=\"flip\">\n      <div class=\"front\">Front</div>\n      <div class=\"back\">Back</div>\n    </div>\n\nNow call `$.fn.gfxFlip()` to setup the flipping. To activate a flip, trigger the `flip` event on the element.\n\n    $(\"#flip\").gfxFlip().click(function() {\n      return $(this).trigger(\"flip\");\n    });\n    \n#Cube\n\nThe Cube is great for displaying multiple pieces of information, perhaps steps in a tutorial or setup procedure. As before, you first need to include the `gfx.cube.js` file.\n\n    <script src=\"lib/gfx.cube.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\n    \nThen setup the correct element structure:\n\n    <div id=\"cube\">\n      <div class=\"front\"></div>\n      <div class=\"back\"></div>\n      <div class=\"left\"></div>\n      <div class=\"right\"></div>\n      <div class=\"top\"></div>\n      <div class=\"bottom\"></div>\n    </div>\n    \nYou don't have to include all the faces, just the `front` face is required. Now call `$.fn.gfxCube()`, passing in the `height` and `width` of the cube.\n    \n    $(\"#cube\").gfxCube({\n      width: 500,\n      height: 290\n    });\n    \nTo change the face, just trigger the `cube` event, passing in the face name as event data.\n    \n    $(\".download\").click(function() {\n      return $(\"#cube\").trigger(\"cube\", \"right\");\n    });\n    \n    $(\".back\").click(function() {\n      return $(\"#cube\").trigger(\"cube\", \"front\");\n    });\n\n#Transforms\n\nGFX supports the following CSS3 transforms:\n\n* scale\n* scaleX\n* scaleY\n* scale3d\n* rotate\n* rotateX\n* rotateY\n* rotateZ\n* rotate3d\n* translate\n* translateX\n* translateY\n* translateZ\n* translate3d\n* skew\n* skewX\n* skewY\n* matrix\n* matrix3d\n* perspective\n\nCSS Transforms are a whole subject to themselves, and unfortunately there isn't space to elaborate on them here. Luckily [David DeSandro](http://desandro.com/) has created a great set of tutorials, which you can find [here](http://desandro.github.com/3dtransforms/). \n\nAdditionally the WebKit blog has a great [article](http://www.webkit.org/blog/386/3d-transforms/) on transitions when they first introduced, and the [Apple Developer center](http://developer.apple.com/library/safari/#documentation/InternetWeb/Conceptual/SafariVisualEffectsProgGuide/Transforms/Transforms.html) also provides good documentation. \n\n#Demos\n\nMore demos are planned, but feel free to contribute ideas if you coming up with a cool idea. At the moment, I'm thinking of re-creating the interfaces from Time Machine and Windows 8.",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/maccman/gfx/issues"
  },
  "homepage": "https://github.com/maccman/gfx",
  "_id": "gfx@0.0.4",
  "_from": "gfx@~0.0.4"
}
